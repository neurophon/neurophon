##################################################################################################################
##				Author:		Dematties Dario Jesus						##
##				Contact:	dariodematties@hotmail.com.ar					##
##						dariodematties@yahoo.com.ar					##
##						dario.dematties@frm.utn.edu.ar					##
##				Project:	Engineering PhD Project						##
##				Institution:	Universidad de Buenos Aires					##
##						Facultad de Ingeniería (FIUBA)					##
##				Workplace:	Instituto de Ingeniería						##
##						Biomédica FIUBA	&						##
##						CCT CONICET Mendoza INCIHUSA					##
##################################################################################################################

# File Name:		GenerateModelFiles.m
# Language:		GNU Octave high-level interpreted language.

# This program generates a set of files which will be used by Model object class 
# in order togenerate its structure and configuration.

function GenerateModelFiles(folderName)

if ( !is_dq_string(folderName) && !is_sq_string(folderName) )
	error("folder name must be of type string");
endif

[status, msg, msgid] = mkdir (folderName);
if ( status != 1 )
	disp(msg);
	disp(msgid);
	error("in function GenerateModelFiles");
endif

clear -x folderName

# This is the model structure
logical(encoderIncorporation = true);
logical(newEncoder = true);
int32(numberOfLayers = 0);
int32(newLayerAt = 0);

# Saves the model structure
save (["./" folderName "/ModelStructure.mat"], "encoderIncorporation", "newEncoder", "numberOfLayers", "newLayerAt"); 

clear -x folderName

# This is the encoder layer structure
int32(afferentArrayDimensionality = [5, 128]);
int32(apicalArrayDimensionality = [9, 9]);
int32(columnsArrayDimensionality = [9, 9]);

int32(afferentReceptiveField = [2, 63]);
afferentPercentage = 0.05;
logical(afferentWrapAround = true);

int32(lateralDistalReceptiveField = [4, 4]);
lateralDistalPercentage = 0.6;
logical(lateralDistalWrapAround = true);

int32(apicalReceptiveField = [-1, -1]);
apicalPercentage = 0.6;
logical(apicalWrapAround = true);

int32(iterationNum = 0);

int32(populationsArrayDimensionality = [15, 15]);
int32(apicalPopulationsArrayDimensionality = [15, 15]);
potentialPercentage = 0.2;

# Saves the encoder layer structure
save (["./" folderName "/EncoderLayerStructure.mat"], "afferentArrayDimensionality", ...
						      "apicalArrayDimensionality", ...
						      "columnsArrayDimensionality", ...
						      "afferentReceptiveField", ...
						      "afferentPercentage", ...
						      "afferentWrapAround", ...
						      "lateralDistalReceptiveField", ...
						      "lateralDistalPercentage", ...
						      "lateralDistalWrapAround", ...
						      "apicalReceptiveField", ...
						      "apicalPercentage", ...
						      "apicalWrapAround", ...
						      "iterationNum", ...
						      "populationsArrayDimensionality", ...
						      "apicalPopulationsArrayDimensionality", ...
						      "potentialPercentage");

clear -x folderName

# These are the encoder layer parameters 
logical(enableLearning = false);
logical(distalSensitivity = false);
proximalInformationThreshold = 0.1;
distalInformationThreshold = 0.5;
activationRadius = 0.8;
sparsity = 0.99;
logical(enableProximalLearning = false);
logical(enableDistalLearning = false);
proximalLearningRate = 0.001;
proximalNeighborhood = 0.005;
logical(spikeTimeDependentSynapticPlasticity = true);
distalLearningRate = 0.001;
limitsLearningRate = 0.1;

# Saves the encoder layer parameters
save (["./" folderName "/EncoderLayerParameters.mat"], "enableLearning", ...
						       "distalSensitivity", ...
						       "proximalInformationThreshold", ...
						       "distalInformationThreshold", ...
						       "activationRadius", ...
						       "sparsity", ...
						       "enableProximalLearning", ...
						       "enableDistalLearning", ...
						       "proximalLearningRate", ...
						       "proximalNeighborhood", ...
						       "spikeTimeDependentSynapticPlasticity", ...
						       "distalLearningRate", ...
						       "limitsLearningRate");

clear -x folderName

#{
# This is the regular layer structure number 0
int32(afferentArrayDimensionality = [5, 5]);
int32(apicalArrayDimensionality = [5, 5]);
int32(columnsArrayDimensionality = [5, 5]);

int32(afferentReceptiveField = [2, 2]);
afferentPercentage = 0.6;
logical(afferentWrapAround = true);

int32(lateralProximalReceptiveField = [2, 2]);
lateralProximalPercentage = 0.5;
logical(lateralProximalWrapAround = true);

int32(lateralDistalReceptiveField = [2, 2]);
lateralDistalPercentage = 0.5;
logical(lateralDistalWrapAround = true);

int32(apicalReceptiveField = [2, 2]);
apicalPercentage = 0.5;
logical(apicalWrapAround = true);

int32(iterationNum = 0);

int32(populationsArrayDimensionality = [5, 5]);
int32(afferentPopulationsArrayDimensionality = [5, 5]);
int32(apicalPopulationsArrayDimensionality = [5, 5]);

int32(temporalGatheringAfferentValue = 1);
potentialPercentage = 0.1;

# Saves the regular layer structure number 0
save (["./" folderName "/RegularLayerStructure_0.mat"], "afferentArrayDimensionality", ...
						      "apicalArrayDimensionality", ...
						      "columnsArrayDimensionality", ...
						      "afferentReceptiveField", ...
						      "afferentPercentage", ...
						      "afferentWrapAround", ...
						      "lateralProximalReceptiveField", ...
						      "lateralProximalPercentage", ...
						      "lateralProximalWrapAround", ...
						      "lateralDistalReceptiveField", ...
						      "lateralDistalPercentage", ...
						      "lateralDistalWrapAround", ...
						      "apicalReceptiveField", ...
						      "apicalPercentage", ...
						      "apicalWrapAround", ...
						      "iterationNum", ...
						      "populationsArrayDimensionality", ...
						      "afferentPopulationsArrayDimensionality", ...
						      "apicalPopulationsArrayDimensionality", ...
						      "temporalGatheringAfferentValue", ...
						      "potentialPercentage");

clear -x folderName

# These are the regular layer parameters number 0
logical(enableLearning = false);
logical(distalSensitivity = false);
logical(activationHomeostasis = false);
proximalInformationThreshold = 0.5;
distalInformationThreshold = 0.5;
sparsity = 0.95; # 0.99;
logical(enableProximalLearning = false);
logical(enableDistalLearning = false);
logical(synapticHomeostasis = false);
proximalLearningRate = 0.001;
proximalNeighborhood = 0.005;
plasticity = 0.1; #0.01;
logical(spikeTimeDependentSynapticPlasticity = true);
distalLearningRate = 0.001;

# Saves the encoder layer parameters
save (["./" folderName "/RegularLayerParameters_0.mat"], "enableLearning", ...
						         "distalSensitivity", ...
						         "activationHomeostasis", ...
						         "proximalInformationThreshold", ...
						         "distalInformationThreshold", ...
						         "sparsity", ...
						         "enableProximalLearning", ...
						         "enableDistalLearning", ...
						         "synapticHomeostasis", ...
						         "proximalLearningRate", ...
						         "proximalNeighborhood", ...
						         "plasticity", ...
						         "spikeTimeDependentSynapticPlasticity", ...
						         "distalLearningRate");

clear -x folderName

# This is the regular layer structure number 1
int32(afferentArrayDimensionality = [5, 5]);
int32(apicalArrayDimensionality = [5, 5]);
int32(columnsArrayDimensionality = [5, 5]);

int32(afferentReceptiveField = [2, 2]);
afferentPercentage = 0.6;
logical(afferentWrapAround = true);

int32(lateralProximalReceptiveField = [2, 2]);
lateralProximalPercentage = 0.5;
logical(lateralProximalWrapAround = true);

int32(lateralDistalReceptiveField = [2, 2]);
lateralDistalPercentage = 0.5;
logical(lateralDistalWrapAround = true);

int32(apicalReceptiveField = [2, 2]);
apicalPercentage = 0.5;
logical(apicalWrapAround = true);

int32(iterationNum = 0);

int32(populationsArrayDimensionality = [5, 5]);
int32(afferentPopulationsArrayDimensionality = [5, 5]);
int32(apicalPopulationsArrayDimensionality = [5, 5]);

int32(temporalGatheringAfferentValue = 1);
potentialPercentage = 0.1;

# Saves the regular layer structure number 1
save (["./" folderName "/RegularLayerStructure_1.mat"], "afferentArrayDimensionality", ...
						      "apicalArrayDimensionality", ...
						      "columnsArrayDimensionality", ...
						      "afferentReceptiveField", ...
						      "afferentPercentage", ...
						      "afferentWrapAround", ...
						      "lateralProximalReceptiveField", ...
						      "lateralProximalPercentage", ...
						      "lateralProximalWrapAround", ...
						      "lateralDistalReceptiveField", ...
						      "lateralDistalPercentage", ...
						      "lateralDistalWrapAround", ...
						      "apicalReceptiveField", ...
						      "apicalPercentage", ...
						      "apicalWrapAround", ...
						      "iterationNum", ...
						      "populationsArrayDimensionality", ...
						      "afferentPopulationsArrayDimensionality", ...
						      "apicalPopulationsArrayDimensionality", ...
						      "temporalGatheringAfferentValue", ...
						      "potentialPercentage");

clear -x folderName

# These are the regular layer parameters number 1
logical(enableLearning = false);
logical(distalSensitivity = false);
logical(activationHomeostasis = false);
proximalInformationThreshold = 0.5;
distalInformationThreshold = 0.5;
sparsity = 0.95; # 0.99;
logical(enableProximalLearning = false);
logical(enableDistalLearning = false);
logical(synapticHomeostasis = false);
proximalLearningRate = 0.001;
proximalNeighborhood = 0.005;
plasticity = 0.1; #0.01;
logical(spikeTimeDependentSynapticPlasticity = true);
distalLearningRate = 0.001;

# Saves the encoder layer parameters
save (["./" folderName "/RegularLayerParameters_1.mat"], "enableLearning", ...
						         "distalSensitivity", ...
						         "activationHomeostasis", ...
						         "proximalInformationThreshold", ...
						         "distalInformationThreshold", ...
						         "sparsity", ...
						         "enableProximalLearning", ...
						         "enableDistalLearning", ...
						         "synapticHomeostasis", ...
						         "proximalLearningRate", ...
						         "proximalNeighborhood", ...
						         "plasticity", ...
						         "spikeTimeDependentSynapticPlasticity", ...
						         "distalLearningRate");
#}
endfunction
